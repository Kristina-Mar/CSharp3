@page "/editToDoItem/{ItemId:int}"
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit To Do Item</PageTitle>

<div class="container mt-4">
@if (ToDoItem is not null)
{
    <EditForm Model="ToDoItem" FormName="EditToDoItem" OnSubmit="Submit" class="row g-3">
        <div class="col-md-6">
            <label class="form-label">Name:</label><InputText id="Name" @bind-Value="ToDoItem.Name" class="form-control"/>
        </div>
        <div class="col-md-6">
            <label class="form-label">Category:</label><InputText id="Category" @bind-Value="ToDoItem.Category" class="form-control"/>
        </div>
        <div class="col-md-12">
            <label class="form-label">Description:</label><InputText id="Description" @bind-Value="ToDoItem.Description" class="form-control"/>
        </div>
        <div class="col-md-12">
        <div class="form-check">
            <label class="form-check-label">Is completed? </label><InputCheckbox id="IsCompleted" @bind-Value="ToDoItem.IsCompleted" class="form-check-input"/>
        </div>
        </div>
        <div>
            <button type="submit" class="btn btn-success">Submit</button>
            <button type="button" class="btn btn-danger" @onclick="Return">Cancel</button>
        </div>
    </EditForm>

}
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        ToDoItem = await ToDoItemsClient.ReadByIdAsync(ItemId);
    }

    [Parameter]
    public int ItemId { get; set; }

    [SupplyParameterFromForm]
    public ToDoItemView ToDoItem { get; set; }

    public async Task Submit()
    {
        await ToDoItemsClient.UpdateByIdAsync(ToDoItem);
        NavigationManager.NavigateTo("/");
    }

    public void Return()
    {
        NavigationManager.NavigateTo("/");
    }
}
