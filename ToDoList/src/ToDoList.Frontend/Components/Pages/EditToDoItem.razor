@page "/editToDoItem/{ItemId:int}"
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit To Do Item</PageTitle>

<div class="container mt-4">
@if (ToDoItem is not null)
{
    <EditForm Model="ToDoItem" FormName="EditToDoItem" OnValidSubmit="Submit"> @*OnSubmit -> OnValidSubmit*@
        <DataAnnotationsValidator />
        <label for="Name" class="form-label">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="ToDoItem.Name" />
        <ValidationMessage For="() => ToDoItem.Name" />

        <label for="Category" class="form-label">Category:</label>
        <InputText id="Category" class="form-control" @bind-Value="ToDoItem.Category" />
        <ValidationMessage For="() => ToDoItem.Category" />

        <label for="Description" class="form-label">Description:</label>
        <InputText id="Description" class="form-control" @bind-Value="ToDoItem.Description" />
        <ValidationMessage For="() => ToDoItem.Description" />

        <label for="IsCompleted" class="form-check-label">IsCompleted:</label>
        <InputCheckbox id="IsCompleted" class="form-check" @bind-Value="ToDoItem.IsCompleted" />
        <ValidationMessage For="() => ToDoItem.IsCompleted" />

        <button type="submit">Submit</button>
    </EditForm>

}
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        ToDoItem = await ToDoItemsClient.ReadByIdAsync(ItemId);
        SubmitDelegate = LogSubmit;
        SubmitDelegate -= LogSubmit;
    }

    [Parameter]
    public int ItemId { get; set; }

    [SupplyParameterFromForm]
    public ToDoItemView ToDoItem { get; set; }

    private delegate void ToDoItemViewProcessingDelegate(ToDoItemView toDoItem);

    private ToDoItemViewProcessingDelegate SubmitDelegate;

    private void LogSubmit(ToDoItemView toDoItem)
    {
        Console.WriteLine($"Item with Id {toDoItem.ToDoItemId} was updated.");
    }

    public async Task Submit()
    {
        SubmitDelegate?.Invoke(ToDoItem);
        await ToDoItemsClient.UpdateByIdAsync(ToDoItem);
        NavigationManager.NavigateTo("/");
    }

    public void Return()
    {
        NavigationManager.NavigateTo("/");
    }
}
