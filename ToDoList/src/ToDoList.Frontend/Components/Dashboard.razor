@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<style>
    th{
        background-color: #228b22 ;
        color: white;
        font-family: Arial, Helvetica, sans-serif;
        text-align: left; }
    tr:nth-child(even) {
  background-color: #ddf7dd;}
</style>

<h1>Dashboard</h1>

<table>
    <thead>
        <tr>
            <th style="width:10%"><button style="background: none;
  border: none;
  padding: 0;
  font: inherit;
  color: white;
  text-decoration: underline;
  cursor: pointer;
  font-size: 16px;" @onclick="OrderItemsById">Id</button>▾</th>
            <th style="width:35%"><button style="background: none;
  border: none;
  padding: 0;
  font: inherit;
  color: white;
  text-decoration: underline;
  cursor: pointer;
  font-size: 16px;" @onclick="OrderItemsByName">Name</button>▾</th>
            <th style="width:45%">Description</th>
            <th style="width:10%">Completed?</th>
        </tr>
    </thead>

    @if (toDoItems != null)
    {
        <p>Načítám...</p>
    }

    @if (toDoItems != null)
    {
    @foreach (var toDoItem in toDoItems)
        {
        <tr>
           <td>@toDoItem.ToDoItemId</td>
           <td>@toDoItem.Name</td>
           <td>@toDoItem.Description</td>
           <td>@(toDoItem.IsCompleted ? "Yes" : "No")</td>
        </tr>
        }
    }

</table>
<br>
<button @onclick="OrderItemsById">Order by ID</button>
<button @onclick="OrderItemsByName">Order by name</button>

@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    private List<ToDoItemView>? toDoItems = [];

    private void OrderItemsById()
    {
        toDoItems = toDoItems?.OrderBy(i => i.ToDoItemId).ToList();
    }
    private void OrderItemsByName()
    {
        toDoItems = toDoItems?.OrderBy(i => i.Name).ToList();
    }
}
