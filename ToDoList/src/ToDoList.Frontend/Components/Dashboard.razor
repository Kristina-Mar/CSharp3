@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Dashboard</h1>

<table class="table table-hover mt-5">
    <thead class="table-dark">
            <th>Id</th>
            <th>Name</th>
            <th>Category</th>
            <th>Description</th>
            <th>Completed?</th>
            <th>Actions</th>
    </thead>

    <tbody>
    @if (toDoItems == null)
    {
        <p>Loading...</p>
    }

    @if (toDoItems != null)
    {
    @foreach (var toDoItem in toDoItems)
        {
        <tr class=@SetRowClassBasedOnTaskCompletion(toDoItem)>
           <td>@toDoItem.ToDoItemId</td>
           <td>@toDoItem.Name</td>
           <td>@toDoItem.Category</td>
           <td>@toDoItem.Description</td>
           <td>@(toDoItem.IsCompleted ? "Yes" : "No")</td>
           <td>
            <i class=@SetIconBasedOnTaskCompletion(toDoItem) @onclick="() => ChangeTaskStatus(toDoItem)"></i>
            <i class="bi bi-pencil-square" @onclick="() => EditItem(toDoItem)"></i>
            <i class="bi bi-trash" @onclick="() => DeleteItem(toDoItem)"></i>
           </td>
        </tr>
        }
    }
    </tbody>

</table>
<br>
<button class="btn btn-success" @onclick="OrderItemsById">Order by ID</button>
<button class="btn btn-success" @onclick="OrderItemsByName">Order by name</button>

@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    private List<ToDoItemView>? toDoItems = [];

    private string SetRowClassBasedOnTaskCompletion(ToDoItemView item)
    {
        return item.IsCompleted ? "table-success" : "table-secondary";
    }

    private void OrderItemsById()
    {
        toDoItems = toDoItems?.OrderBy(i => i.ToDoItemId).ToList();
    }

    private void OrderItemsByName()
    {
        toDoItems = toDoItems?.OrderBy(i => i.Name).ToList();
    }

    public string SetIconBasedOnTaskCompletion(ToDoItemView item)
    {
        return item.IsCompleted ? "bi bi-check-circle" : "bi bi-circle";
    }

    public async Task ChangeTaskStatus(ToDoItemView item)
    {
        item.IsCompleted = !item.IsCompleted;
        await ToDoItemsClient.UpdateByIdAsync(item);
    }

    public void EditItem(ToDoItemView item)
    {
        NavigationManager.NavigateTo($"editToDoItem/{item.ToDoItemId}");
    }

    public async Task DeleteItem(ToDoItemView item)
    {
        await ToDoItemsClient.DeleteByIdAsync(item);
        await OnInitializedAsync();
    }
}
